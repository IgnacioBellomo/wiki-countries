{"version":3,"sources":["logo.svg","components/CountryDetail.jsx","components/FullApp.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","numeral","require","CountryDetail","_this","this","theCountry","props","countries","find","eachCountry","cca3","match","params","id","react_default","a","createElement","className","name","common","capital","subregion","region","area","format","Object","keys","languages","map","language","borders","length","country","countryInfo","react_router_dom","to","src","cca2","Component","FullApp","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","displayCountries","key","state","currentCountry","scope","react_router","exact","path","render","CountryDetail_CountryDetail","assign","App","FullApp_FullApp","Boolean","window","location","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e9d447c0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport {Link} from 'react-router-dom';\r\nlet numeral = require('numeral');\r\n\r\nexport default class CountryDetail extends Component {\r\n\r\n\r\n\r\n    render() {\r\n        let theCountry = this.props.countries.find((eachCountry)=>{\r\n            return eachCountry.cca3 === this.props.match.params.id;\r\n        })\r\n\r\n        let languages = () => {\r\n            return Object.keys(theCountry.languages).map((language) => {\r\n                return <li>{theCountry.languages[language]}</li>\r\n            })\r\n        }\r\n\r\n        let borders = () => {\r\n            let firstHalf = \"https://www.countryflags.io/\";\r\n            let secondHalf = \"/flat/32.png\";\r\n            return theCountry.borders.map(country => {\r\n                let countryInfo = this.props.countries.find(eachCountry => {\r\n                    return eachCountry.cca3 === country;\r\n                })\r\n                return (\r\n                    <li>\r\n                        <Link to = {\"/country/\" + country}>\r\n                            <img src={firstHalf + countryInfo.cca2 + secondHalf}/> <span>{countryInfo.name.common}</span>\r\n                        </Link>\r\n                    </li>\r\n                )  \r\n            })\r\n        }\r\n\r\n        return (\r\n            <div className=\"country-details\">\r\n                <h1>{theCountry.name.common}</h1>\r\n                <table className=\"table\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td><b>Region</b></td>\r\n                            {theCountry.capital[0] &&\r\n                                <td>{theCountry.subregion}</td>\r\n                            }\r\n                            {!theCountry.subregion &&\r\n                                <td>{theCountry.region}</td>\r\n                            }\r\n                        </tr>\r\n                        <tr>\r\n                            <td><b>Capital</b></td>\r\n                            {theCountry.capital[0] &&\r\n                                <td>{theCountry.capital[0]}</td>\r\n                            }\r\n                            {!theCountry.capital[0] &&\r\n                                <td>No capital</td>\r\n                            }\r\n                        </tr>\r\n                        <tr>\r\n                            <td><b>Area</b></td>\r\n                            <td>{numeral(theCountry.area).format('0,0')} km<sup>2</sup></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td><b>Languages</b></td>\r\n                            <td>\r\n                                <ul>\r\n                                    {languages()}\r\n                                </ul>\r\n                            </td>   \r\n                        </tr>\r\n                        <tr>\r\n                            <td><b>Borders</b></td>\r\n                            <td>\r\n                                {theCountry.borders.length > 0 &&\r\n                                    <ul>\r\n                                        {borders()}\r\n                                    </ul>\r\n                                }\r\n                                {!theCountry.borders.length > 0 && \r\n                                    <span>No bordering country</span>\r\n                                }\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport countries from '../countries.json';\r\nimport CountryDetail from './CountryDetail';\r\nimport {Link, Switch, Route} from 'react-router-dom';\r\n\r\n\r\n\r\nexport default class FullApp extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            currentCountry: countries[0],\r\n        }\r\n    }\r\n\r\n    displayCountries = () => {\r\n        let firstHalf = \"https://www.countryflags.io/\";\r\n        let secondHalf = \"/flat/32.png\";\r\n        return countries.map((eachCountry) => {\r\n\r\n            return (\r\n                    <tr key={eachCountry.cca2}>\r\n                        <td>\r\n                            <Link to = {\"/country/\" + eachCountry.cca3}>\r\n                                <img src={firstHalf + eachCountry.cca2 + secondHalf}/> <span>{eachCountry.name.common}</span>\r\n                            </Link>\r\n                        </td>\r\n                    </tr>\r\n            )  \r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <nav className=\"navbar navbar-dark bg-primary\">\r\n                    <span className=\"navbar-brand mb-0 h1\">WikiCountries</span>\r\n                </nav>\r\n                <div className=\"container-fluid the-page\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-4 pre-scrollable\">\r\n                            <table className=\"table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th scope=\"col\">Countries</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                {this.displayCountries()}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                        <div className=\"col-8\">\r\n                        <Switch>\r\n                            <Route exact path=\"/country/:id\" render ={ props => \r\n                                <CountryDetail\r\n                                    {...props}\r\n                                    countries= {countries}\r\n                                    /> } /> \r\n                        </Switch>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport FullApp from './components/FullApp';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FullApp/>\n    </div>\n  );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}